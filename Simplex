
## test with this sample problem
## Maximize f = 8x + 10y + 7z
## Constraints:
## x + 3y + 2z <= 10
## x + 5y + z <= 8
## with x, y, z >= 0

## augmented matrix for above:

r1 <- c(1,3,2,1,0,0,10)
r2 <- c(1,5,1,0,1,0, 8)
r3 <- c(-8,-10,-7,0,0,1,0)
M <- as.matrix(rbind(r1, r2, r3))

## the function:

simplex2 <- function(m) {
  
  ## load library
  library('sfsmisc')
  
  ## assign matrix
  M <- m
  
  if (min(tail(M,1)) > 0) {
    print('Hey, we already are optimal!')
    stop
  } else {
    ##initialize row handling functions
    ## row multiplication; x=multiplier, m=matrix, r=pivot row
    rmult <- function(x,m,row){
      m[row,] <- x*m[row,]
      m
    }
    ## row addition; x=multiplier, m=matrix, r1=pivot row, r2=row added to
    radd <- function(x,m,row1,row2){
      addme <- x * (m[row1,])
      m[row2,] <- m[row2,] + addme
      m
    }
    
    ## function loops as long as last row of M has a negative value  
    
    checkifsolved <- -1
    
    while (checkifsolved < 0) {  
      ## this first section gets pivot row  
      ## get the pivot column
      pivcol <- which.min(tail(M,1))
      ## make an empty matrix to hold result of for a loop to identify the correct row
      pivrow <- matrix(0, 0, ncol=2)
      ## run loop to check for row with lowest object row ratio, pivrow
      for (i in 1:(nrow(M)-1)) {
        ratio <- c(i,last(M[i,])/M[i,pivcol])
        pivrow <- rbind(pivrow, ratio)
      }
      ## index the row with the lowest ratio; this row used in operations
      oprow <- which.min(pivrow[,2])
      ## set pivot to 1 
      ## oprow, pivcol are pointers to the pivot cell
      x <- 1/M[oprow,pivcol]
      ## apply function rmult to do the row multiplication and update M
      M <- rmult(x,M,oprow)
      
      ## now do operations using the pivot row
##      for (i in 1:(nrow(M)-1)) {
##        if (!M[which.max(abs(M[,pivcol])),pivcol]%in%c(0,1)) {
      while (any(M[-oprow,pivcol]!=0)) {
          nextrow <- which.max(!abs(M[,pivcol]%in%c(0,1)))
          x <- -1 * M[nextrow,pivcol]
          M <- radd(x,M,oprow,nextrow)
        } 
      checkifsolved <- min(tail(M,1))
    }
  }
  print(M)
}
